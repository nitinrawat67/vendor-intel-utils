From 4db95938d251341c9a001037df60895c292b7d8f Mon Sep 17 00:00:00 2001
From: Nitin Rawat <nitin.rawat@intel.com>
Date: Fri, 1 Mar 2019 11:05:25 +0530
Subject: [PATCH 4/4] Fix for Play/pause operation for DUT

Play pause operation was not working from DUT as reference
device was not sending playbackstatus changed notification.
Added code to handle this at DUT side itself using
getplaystatus response.

Change-Id: I69390621f10c75611380aead6230134bbd6c3478
Tracked-On:OAM-72645
Signed-off-by: Nitin Rawat <nitin.rawat@intel.com>
---
 btif/src/btif_rc.cc        | 30 ++++++++++++++++++++++++++----
 stack/avrc/avrc_pars_ct.cc |  3 ++-
 2 files changed, 28 insertions(+), 5 deletions(-)

diff --git a/btif/src/btif_rc.cc b/btif/src/btif_rc.cc
index c226b5f..ed62aef 100644
--- a/btif/src/btif_rc.cc
+++ b/btif/src/btif_rc.cc
@@ -21,7 +21,6 @@
  *  Description:   Bluetooth AVRC implementation
  *
  *****************************************************************************/
-
 #define LOG_TAG "bt_btif_avrc"
 
 #include <errno.h>
@@ -347,7 +346,10 @@ static bool absolute_volume_disabled(void);
 static rc_cb_t btif_rc_cb;
 static btrc_callbacks_t* bt_rc_callbacks = NULL;
 static btrc_ctrl_callbacks_t* bt_rc_ctrl_callbacks = NULL;
-
+//These 2 flag has been introduced to avoid playback status changed handler
+//getting called again and again even if the status has not changed
+static int play_flag = 0;
+static int pause_flag = 0;
 /*****************************************************************************
  *  Static functions
  *****************************************************************************/
@@ -3203,7 +3205,8 @@ static void handle_notification_response(tBTA_AV_META_MSG* pmeta_msg,
         /* Start timer to get play status periodically
          * if the play state is playing.
          */
-        if (p_rsp->param.play_status == AVRC_PLAYSTATE_PLAYING ||
+        if (p_rsp->param.play_status == AVRC_PLAYSTATE_PLAYING || 
+            p_rsp->param.play_status == AVRC_PLAYSTATE_PAUSED ||
             p_rsp->param.play_status == AVRC_PLAYSTATE_REV_SEEK ||
             p_rsp->param.play_status == AVRC_PLAYSTATE_FWD_SEEK) {
           rc_start_play_status_timer(p_dev);
@@ -3309,7 +3312,8 @@ static void handle_notification_response(tBTA_AV_META_MSG* pmeta_msg,
         /* Start timer to get play status periodically
          * if the play state is playing.
          */
-        if (p_rsp->param.play_status == AVRC_PLAYSTATE_PLAYING) {
+        if ((p_rsp->param.play_status == AVRC_PLAYSTATE_PLAYING) ||
+	    (p_rsp->param.play_status == AVRC_PLAYSTATE_PAUSED)) {
           rc_start_play_status_timer(p_dev);
           get_element_attribute_cmd(AVRC_MAX_NUM_MEDIA_ATTR_ID, attr_list,
                                     p_dev);
@@ -3869,6 +3873,24 @@ static void handle_get_playstatus_response(tBTA_AV_META_MSG* pmeta_msg,
         FROM_HERE,
         base::Bind(bt_rc_ctrl_callbacks->play_position_changed_cb,
                    p_dev->rc_addr, p_rsp->song_len, p_rsp->song_pos));
+        if ((p_rsp->song_pos == 0) && (p_rsp->play_status == 0x02) && !pause_flag) {
+           do_in_jni_thread(
+           FROM_HERE,
+           base::Bind(bt_rc_ctrl_callbacks->play_status_changed_cb,
+                      p_dev->rc_addr,
+                      (btrc_play_status_t)p_rsp->play_status));
+           pause_flag = 1;
+           play_flag = 0;
+        }
+       if ((p_rsp->song_pos != 0) && (p_rsp->play_status == 0x01) && !play_flag) {
+           do_in_jni_thread(
+           FROM_HERE,
+           base::Bind(bt_rc_ctrl_callbacks->play_status_changed_cb,
+                      p_dev->rc_addr,
+		      (btrc_play_status_t)p_rsp->play_status));
+           pause_flag = 0;
+           play_flag = 1;
+        }
   } else {
     BTIF_TRACE_ERROR("%s: Error in get play status procedure: %d", __func__,
                      p_rsp->status);
diff --git a/stack/avrc/avrc_pars_ct.cc b/stack/avrc/avrc_pars_ct.cc
index a7a42a5..de5295e 100644
--- a/stack/avrc/avrc_pars_ct.cc
+++ b/stack/avrc/avrc_pars_ct.cc
@@ -765,9 +765,10 @@ static tAVRC_STS avrc_ctrl_pars_vendor_rsp(tAVRC_MSG_VENDOR* p_msg,
       }
       min_len += 9;
       if (len < min_len) goto length_error;
+      p_result->get_play_status.status = AVRC_STS_NO_ERROR;
       BE_STREAM_TO_UINT32(p_result->get_play_status.song_len, p);
       BE_STREAM_TO_UINT32(p_result->get_play_status.song_pos, p);
-      BE_STREAM_TO_UINT8(p_result->get_play_status.status, p);
+      BE_STREAM_TO_UINT8(p_result->get_play_status.play_status, p);
       break;
 
     case AVRC_PDU_SET_ADDRESSED_PLAYER:
-- 
2.17.1

